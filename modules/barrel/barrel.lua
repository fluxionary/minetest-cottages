--local S = cottages.S
--local F = minetest.formspec_escape
--local FS = function(...) return F(S(...)) end
--local barrel = cottages.barrel
--
--
--local barrel_formspec = ([[
--	size[8,9]
--    label[0,0.0;%s]
--    label[0,3.0;%s]
--	label[3,0;%s]
--	list[context;input;3,0.5;1,1;]
--	label[5,3.3;%s]
--	list[context;output;5,3.8;1,1;]
--	list[current_player;main;0,5;8,4;]
--    listring[context;output]
--    listring[current_player;main]
--    listring[context;input]
--    listring[current_player;main]
--	button[6,0.0;1.5,0.5;public;%s]
--]]):format(
--	FS("Liquid Storage"),
--	FS("fill or empty with buckets"),
--	FS("Fill:"),
--	FS("Empty:"),
--	FS("Public?")
--)
--
--function barrel.get_fs_parts(pos)
--	return {
--
--	}
--end
--
--function barrel.update_formspec(pos)
--	local liquid = barrel.get_barrel_liquid(pos)
--	local liquid_amount = barrel.get_liquid_amount(pos)
--
--	local parts = {barrel_formspec}
--
--	if liquid then
--		local liquid_texture = barrel.texture_by_liquid[liquid]
--		table.insert(parts, ("image[2.6,2;2,3;%s^[lowpart:%s:%s]"):format(
--			cottages.textures.furniture,
--			100 * liquid_amount / max_liquid_amount,
--			liquid_texture
--		))
--		table.insert(parts, ("tooltip[2.6,2;2,3;%s]"):format(
--			F(("%s (%i/%i)"):format(
--				barrel.name_by_liquid[liquid],
--				barrel.get_liquid_amount(pos),
--				max_liquid_amount
--			)))
--		)
--
--	else
--		table.insert(parts, ("image[2.6,2;2,3;%s]"):format(
--			cottages.textures.furniture
--		))
--	end
--
--	local meta = minetest.get_meta(pos)
--	local owner = meta:get("owner")
--
--	if not owner then
--		table.insert(parts, ("label[6,1;%s]"):format(FS("(Public)")))
--
--	elseif owner == " " then
--		table.insert(parts, ("label[6,1;%s]"):format(FS("(Protected)")))
--
--	else
--		table.insert(parts, ("label[6,1;%s]"):format(FS("Owner: @1", owner)))
--	end
--
--	meta:set_string("formspec", table.concat(parts, ""))
--end
--
--function barrel.update_infotext(pos)
--	local meta = minetest.get_meta(pos)
--	local owner = meta:get("owner")
--
--	local parts = {}
--
--	if not owner then
--		table.insert(parts, S("Public barrel"))
--
--	elseif owner == " " then
--		table.insert(parts, S("Protected barrel"))
--
--	else
--		table.insert(parts, S("Private barrel (owned by @1)", owner))
--	end
--
--	local liquid = barrel.get_barrel_liquid(pos)
--	if liquid then
--		table.insert(parts, ("%s (%i/%i)"):format(
--			barrel.name_by_liquid[liquid],
--			barrel.get_liquid_amount(pos),
--			max_liquid_amount)
--		)
--
--	else
--		table.insert(parts, S("Empty"))
--	end
--
--	meta:set_string("infotext", table.concat(parts, "\n"))
--end
--
--
--function barrel.can_dig(pos, player)
--	local meta = minetest.get_meta(pos)
--	local liquid_amount = meta:get_int("liquid_amount")
--
--	return liquid_amount == 0
--end
--
--minetest.register_node("cottages:barrel", {
--
--	allow_metadata_inventory_move = function(pos, from_list, from_index, to_list, to_index, count, player)
--		if not player_can_use(pos, player) then
--			return 0
--		end
--
--		local meta = minetest.get_meta(pos)
--		local inv = meta:get_inventory()
--		local to_stack = inv:get_stack(to_list, to_index)
--
--		if not to_stack:is_empty() then
--			return 0
--		end
--
--		local from_stack = inv:get_stack(from_list, from_index)
--		local item = from_stack:get_name()
--
--		if to_list == "input" then
--			if barrel.can_drain(pos, item) then
--				return 1
--			end
--
--		elseif to_list == "output" then
--			if barrel.can_fill(pos, item) then
--				return 1
--			end
--		end
--
--		return 0
--	end,
--
--	allow_metadata_inventory_put = function(pos, listname, index, stack, player)
--		if not player_can_use(pos, player) then
--			return 0
--		end
--
--		local item = stack:get_name()
--
--		if listname == "input" then
--			if barrel.can_drain(pos, item) then
--				return 1
--			end
--
--		elseif listname == "output" then
--			if barrel.can_fill(pos, item) then
--				return 1
--			end
--		end
--
--		return 0
--	end,
--
--	on_metadata_inventory_put = function(pos, listname, index, stack, player)
--		local meta = minetest.get_meta(pos)
--		local inv = meta:get_inventory()
--		local item = stack:get_name()
--
--		if listname == "input" then
--			local empty = barrel.add_barrel_liquid(pos, item)
--			inv:set_stack(listname, index, empty)
--
--		elseif listname == "output" then
--			local full = barrel.drain_barrel_liquid(pos, item)
--			inv:set_stack(listname, index, full)
--		end
--
--		barrel.update_formspec(pos)
--		barrel.update_infotext(pos)
--	end,
--
--	allow_metadata_inventory_take = function(pos, listname, index, stack, player)
--		if player_can_use(pos, player) then
--			return 1
--		end
--
--		return 0
--	end,
--})
--
--cottages.api.register_machine("cottages:barrel", {
--	description = S("barrel"),
--	paramtype = "light",
--	paramtype2 = "facedir",
--	drawtype = "mesh",
--	mesh = "cottages_barrel_closed.obj",
--	tiles = {"cottages_barrel.png"},
--	is_ground_content = false,
--	groups = {
--		snappy = 1,
--		choppy = 2,
--		oddly_breakable_by_hand = 1,
--		flammable = 2
--	},
--	sounds = cottages.sounds.wood,
--
--	inv_info = {
--		input = 1,
--		output = 1,
--	},
--
--	update_infotext = barrel.update_anvil_infotext,
--	update_formspec = barrel.update_anvil_formspec,
--
--	use = barrel.use_anvil,
--	right_click = barrel.rightclick_anvil,
--	get_fs_parts = barrel.get_anvil_fs_parts,
--	get_info = barrel.get_anvil_info,
--
--	on_metadata_inventory_move = barrel.on_metadata_inventory_move,
--	on_metadata_inventory_put = barrel.on_metadata_inventory_put,
--	on_metadata_inventory_take = barrel.on_metadata_inventory_take,
--
--	allow_metadata_inventory_move = barrel.allow_metadata_inventory_move,
--	allow_metadata_inventory_put = barrel.allow_metadata_inventory_put,
--	allow_metadata_inventory_take = barrel.allow_metadata_inventory_take,
--})
